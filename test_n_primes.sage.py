
# This file was *autogenerated* from the file test_n_primes.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_113038384112950627112915298112892539 = Integer(113038384112950627112915298112892539); _sage_const_0 = Integer(0); _sage_const_342 = Integer(342); _sage_const_100 = Integer(100); _sage_const_2500 = Integer(2500); _sage_const_0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF = Integer(0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF); _sage_const_4000 = Integer(4000); _sage_const_40 = Integer(40); _sage_const_3500 = Integer(3500); _sage_const_10 = Integer(10); _sage_const_1000 = Integer(1000); _sage_const_2000 = Integer(2000); _sage_const_1 = Integer(1); _sage_const_3000 = Integer(3000)
import time

'''
sage: prime_pi(436273290)
23163298

#(primes less than p) >>>>> 23163298
approx number of primes = p/log(p) ~= 2^1014

Safe to assume #(primes less than p) >= 2^1000
'''


p = _sage_const_0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE65381FFFFFFFFFFFFFFFF 
pref = _sage_const_113038384112950627112915298112892539 


# Choose a step so that 2^step mod p is smooth? 
# Otherwise multipying A by step multiples 2^A mod p by 2^step mod p which means min smoothness is smoothness of 2^step mod p
# Assumes that (2^A mod p) * (2^step mod p) < p. Unlikely since 2 is a generator and half of the elements of Fp are > 2^1022 so 25% of the time 
# (2^A mod p) * (2^step mod p) > 2^2044 >> p
def search_space():
	base = pref*_sage_const_100 
	step = pref
	for power in range(_sage_const_3 ,_sage_const_342 ):
		base = base * _sage_const_10 
		for i in range(_sage_const_1000 ):
			yield (base + i)
		step = step * _sage_const_10  
                           

def max_prime_fact(A, small_primes):
	cur_n = _sage_const_2 .powermod(A,p)

	max_p_fact = float("inf")

	if cur_n == _sage_const_1  or is_pseudoprime(cur_n) and is_prime(cur_n):
		max_p_fact = cur_n
	else:
		max_p = _sage_const_0 
		
		for fac in small_primes:
			while cur_n % fac == _sage_const_0 :
				cur_n = cur_n // fac
				max_p = fac

		if cur_n == _sage_const_1  or is_pseudoprime(cur_n) and is_prime(cur_n):
			max_p_fact = max(cur_n, max_p)

	return max_p_fact < float("inf")


def test_n(n_primes, n_factored):
    start = time.time()
    small_primes = primes_first_n(n_primes)
    gen = search_space()

    count = _sage_const_0 
    while count < n_factored:
        factored = max_prime_fact(next(gen), small_primes)
        if factored:
            count += _sage_const_1 

    return time.time() - start


def main():
    ns_primes = [_sage_const_2000 ,_sage_const_2500 ,_sage_const_3000 ,_sage_const_3500 ,_sage_const_4000 ]
    n_factored = _sage_const_40 

    results = {}
    for n in ns_primes:
        results[n] = []

    for epoch in range(_sage_const_3 ):
        for i, n in enumerate(ns_primes):
            print (str(epoch) + ':' + str(i) + ' = ' + str(n) + ' -- '),
            time = test_n(n, n_factored)
            print (time)
            results[n].append(time)

    average_results = [(sum(results[n_primes]),n_primes) for n_primes in results]
    print(sorted(average_results))


if __name__ == '__main__':
    main()


'''
Results
[(252.78114485740662, 900), (256.85365414619446, 400), (256.8697292804718, 300), (257.8345503807068, 200), (259.51637387275696, 800), (261.0605580806732, 100), (266.06234407424927, 500), (267.1421630382538, 600), (268.0893249511719, 700)]
Maybe unlocking my computer killed 500,600, and 700?
[(482.46528720855713, 2000), (503.5628271102905, 1000), (503.7016351222992, 1500), (512.841099023819, 900), (526.4915776252747, 400), (531.6825881004333, 300)]
[(520.139705657959, 2000), (522.4681298732758, 4000), (526.2712621688843, 10000), (530.9318239688873, 8000)]
'''

